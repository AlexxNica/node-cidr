0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/Cellar/node/7.7.1/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@4.1.2
3 info using node@v7.7.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/arminhammer/projects/node-cidr',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/arminhammer/.npm/node-cidr/0.1.4/package.tgz not in flight; packing
9 verbose correctMkdir /Users/arminhammer/.npm correctMkdir not in flight; initializing
10 info lifecycle node-cidr@0.1.4~prepublish: node-cidr@0.1.4
11 silly lifecycle node-cidr@0.1.4~prepublish: no script for prepublish, continuing
12 info lifecycle node-cidr@0.1.4~prepare: node-cidr@0.1.4
13 silly lifecycle node-cidr@0.1.4~prepare: no script for prepare, continuing
14 verbose tar pack [ '/Users/arminhammer/.npm/node-cidr/0.1.4/package.tgz',
14 verbose tar pack   '/Users/arminhammer/projects/node-cidr' ]
15 verbose tarball /Users/arminhammer/.npm/node-cidr/0.1.4/package.tgz
16 verbose folder /Users/arminhammer/projects/node-cidr
17 verbose addLocalTarball adding from inside cache /Users/arminhammer/.npm/node-cidr/0.1.4/package.tgz
18 verbose correctMkdir /Users/arminhammer/.npm correctMkdir not in flight; initializing
19 silly cache afterAdd node-cidr@0.1.4
20 verbose afterAdd /Users/arminhammer/.npm/node-cidr/0.1.4/package/package.json not in flight; writing
21 verbose correctMkdir /Users/arminhammer/.npm correctMkdir not in flight; initializing
22 verbose afterAdd /Users/arminhammer/.npm/node-cidr/0.1.4/package/package.json written
23 silly publish { name: 'node-cidr',
23 silly publish   version: '0.1.4',
23 silly publish   description: '[![view on npm](http://img.shields.io/npm/v/example.svg)](https://www.npmjs.org/package/example)',
23 silly publish   main: 'js/index.js',
23 silly publish   types: 'js/index.d.ts',
23 silly publish   scripts:
23 silly publish    { test: 'time tsc && nyc --cache --reporter=lcov ava --verbose && nyc report',
23 silly publish      docs: 'jsdoc2md --template README.hbs --files js/index.js > README.md' },
23 silly publish   keywords:
23 silly publish    [ 'calculator',
23 silly publish      'cidr',
23 silly publish      'ip',
23 silly publish      'ipaddress',
23 silly publish      'ipv6',
23 silly publish      'mask',
23 silly publish      'net',
23 silly publish      'netmask',
23 silly publish      'network',
23 silly publish      'subnet' ],
23 silly publish   author: { name: 'Armin Graf' },
23 silly publish   license: 'Apache-2.0',
23 silly publish   devDependencies:
23 silly publish    { ava: '^0.18.2',
23 silly publish      'jsdoc-to-markdown': '^3.0.0',
23 silly publish      nyc: '^10.1.2',
23 silly publish      typescript: '^2.2.1' },
23 silly publish   ava:
23 silly publish    { files: [ 'test/*.js' ],
23 silly publish      source: [ './js/**/*.{js,jsx}' ],
23 silly publish      concurrency: 10,
23 silly publish      failFast: true,
23 silly publish      tap: false,
23 silly publish      powerAssert: false },
23 silly publish   directories: { test: 'test' },
23 silly publish   dependencies: { 'jsdoc-to-markdown': '^3.0.0' },
23 silly publish   repository:
23 silly publish    { type: 'git',
23 silly publish      url: 'git+https://github.com/arminhammer/node-cidr.git' },
23 silly publish   bugs: { url: 'https://github.com/arminhammer/node-cidr/issues' },
23 silly publish   homepage: 'https://github.com/arminhammer/node-cidr#readme',
23 silly publish   readme: '[![view on npm](http://img.shields.io/npm/v/example.svg)](https://www.npmjs.org/package/example) \n\nnode-cidr is a Javascript library that makes it easy to manipulate IPs and Subnets. Currently only IPv4 is supported, but IPv6 support is planned for a future release. The library consists of two classes: IPv4 and Subnetv4. The IPv4 class allows you to manipulate IP addresses, while Subnetv4 allows you to manipulate subnets using CIDR notation.\n\nSome example usage:\n\n```javascript\nlet cidr = new Subnetv4(\'1.2.3.4/29\');\ncidr.subnets(\'/30\')[0].asString // \'1.2.3.4/30\'\ncidr.count // 8\ncidr.netmask //\'255.255.255.248\'\ncidr.wildcardmask.asString // \'0.0.0.7\'\ncidr.includes(new IPv4(\'1.2.3.4\')) // true\ncidr.includes(new IPv4(\'192.168.0.5\')) // false\ncidr.gateway // IPv4(\'1.2.3.0\')\ncidr.max // IPv4(\'1.2.3.7\')\ncidr.broadcast // IPv4(\'1.2.3.7\')\ncidr.range // [IPv4(\'1.2.3.0\'), IPv4(\'1.2.3.7\')]\ncidr.prev // Subnet(\'1.2.2.248/29\')\ncidr.next // Subnet(\'1.2.3.8/29\')\ncidr.ipList /* [\n    IPv4(\'1.2.3.0\'),\n    IPv4(\'1.2.3.1\'),\n    IPv4(\'1.2.3.2\'),\n    IPv4(\'1.2.3.3\'),\n    IPv4(\'1.2.3.4\'),\n    IPv4(\'1.2.3.5\'),\n    IPv4(\'1.2.3.6\'),\n    IPv4(\'1.2.3.7\')\n  ] */\n```\n\n## Classes\n\n<dl>\n<dt><a href="#IPv4">IPv4</a></dt>\n<dd><p>The IPv4 class represents an IPv4 address.</p>\n</dd>\n<dt><a href="#Subnetv4">Subnetv4</a></dt>\n<dd><p>The Subnetv4 class represents an IPv4 subnet.</p>\n</dd>\n</dl>\n\n<a name="IPv4"></a>\n\n## IPv4\nThe IPv4 class represents an IPv4 address.\n\n**Kind**: global class  \n\n* [IPv4](#IPv4)\n    * [new IPv4(input)](#new_IPv4_new)\n    * [.octets](#IPv4+octets) ⇒ <code>Array.&lt;number&gt;</code>\n    * [.asString](#IPv4+asString) ⇒ <code>string</code>\n    * [.asInt](#IPv4+asInt) ⇒ <code>number</code>\n    * [.asCidr](#IPv4+asCidr) ⇒ <code>string</code>\n    * [.reverse](#IPv4+reverse) ⇒ <code>string</code>\n    * [.asBinary](#IPv4+asBinary) ⇒ <code>string</code>\n    * [.asHex](#IPv4+asHex) ⇒ <code>string</code>\n    * [.next](#IPv4+next) ⇒ <code>Ipv4</code>\n    * [.prev](#IPv4+prev) ⇒ <code>[IPv4](#IPv4)</code>\n\n<a name="new_IPv4_new"></a>\n\n### new IPv4(input)\nThe constructor expects a string in the format \'192.168.0.1\', or alternatively an integer.\n\n\n| Param | Type |\n| --- | --- |\n| input | <code>string</code> &#124; <code>number</code> | \n\n<a name="IPv4+octets"></a>\n\n### iPv4.octets ⇒ <code>Array.&lt;number&gt;</code>\nReturns the address as an array of integers.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+asString"></a>\n\n### iPv4.asString ⇒ <code>string</code>\nReturns the string representation of the address, for example, \'192.168.1.1\'.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+asInt"></a>\n\n### iPv4.asInt ⇒ <code>number</code>\nReturns the integer value of the address.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+asCidr"></a>\n\n### iPv4.asCidr ⇒ <code>string</code>\nReturns the address as a /32 cidr. For example: \'192.168.1.1/32\'\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+reverse"></a>\n\n### iPv4.reverse ⇒ <code>string</code>\nReturns the reverse lookup hostname for the address.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+asBinary"></a>\n\n### iPv4.asBinary ⇒ <code>string</code>\nReturns the binary representation of the address, in string form.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+asHex"></a>\n\n### iPv4.asHex ⇒ <code>string</code>\nProvides the hex value of the address.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+next"></a>\n\n### iPv4.next ⇒ <code>Ipv4</code>\nReturns the next adjacent address.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="IPv4+prev"></a>\n\n### iPv4.prev ⇒ <code>[IPv4](#IPv4)</code>\nReturns the previous adjacent address.\n\n**Kind**: instance property of <code>[IPv4](#IPv4)</code>  \n<a name="Subnetv4"></a>\n\n## Subnetv4\nThe Subnetv4 class represents an IPv4 subnet.\n\n**Kind**: global class  \n\n* [Subnetv4](#Subnetv4)\n    * [new Subnetv4(input)](#new_Subnetv4_new)\n    * [.asString](#Subnetv4+asString) ⇒ <code>string</code>\n    * [.max](#Subnetv4+max) ⇒ <code>[IPv4](#IPv4)</code>\n    * [.count](#Subnetv4+count) ⇒ <code>number</code>\n    * [.netmask](#Subnetv4+netmask) ⇒ <code>[IPv4](#IPv4)</code>\n    * [.range](#Subnetv4+range) ⇒ <code>[Array.&lt;IPv4&gt;](#IPv4)</code>\n    * [.wildcardmask](#Subnetv4+wildcardmask) ⇒ <code>[IPv4](#IPv4)</code>\n    * [.gateway](#Subnetv4+gateway) ⇒ <code>[IPv4](#IPv4)</code>\n    * [.broadcast](#Subnetv4+broadcast) ⇒ <code>[IPv4](#IPv4)</code>\n    * [.ipList](#Subnetv4+ipList) ⇒ <code>[Array.&lt;IPv4&gt;](#IPv4)</code>\n    * [.next](#Subnetv4+next) ⇒ <code>[Subnetv4](#Subnetv4)</code>\n    * [.prev](#Subnetv4+prev) ⇒ <code>[Subnetv4](#Subnetv4)</code>\n    * [.subnets(bitmask, limit)](#Subnetv4+subnets) ⇒ <code>[Array.&lt;Subnetv4&gt;](#Subnetv4)</code>\n    * [.includes(ip)](#Subnetv4+includes) ⇒ <code>boolean</code>\n\n<a name="new_Subnetv4_new"></a>\n\n### new Subnetv4(input)\nThe constructor expects a string parameter that is a valid CIDR. For example, \'10.0.0.0/16\'.\n\n\n| Param | Type |\n| --- | --- |\n| input | <code>string</code> | \n\n<a name="Subnetv4+asString"></a>\n\n### subnetv4.asString ⇒ <code>string</code>\nReturns the string representation of the subnet, in CIDR notation.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+max"></a>\n\n### subnetv4.max ⇒ <code>[IPv4](#IPv4)</code>\nGet the last valid address in the subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+count"></a>\n\n### subnetv4.count ⇒ <code>number</code>\nReturn the number of addresses that are possible within the subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+netmask"></a>\n\n### subnetv4.netmask ⇒ <code>[IPv4](#IPv4)</code>\nReturns the netmask address for the subnet, for example \'255.255.0.0\'\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+range"></a>\n\n### subnetv4.range ⇒ <code>[Array.&lt;IPv4&gt;](#IPv4)</code>\nReturns the first and last address in the subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+wildcardmask"></a>\n\n### subnetv4.wildcardmask ⇒ <code>[IPv4](#IPv4)</code>\nReturns the wildcard mask of the subnets, for example \'0.0.0.7\' for subnet \'1.2.3.4/29\'.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+gateway"></a>\n\n### subnetv4.gateway ⇒ <code>[IPv4](#IPv4)</code>\nReturns the gateway address for the subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+broadcast"></a>\n\n### subnetv4.broadcast ⇒ <code>[IPv4](#IPv4)</code>\nReturns the broadcast address for the subnet\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+ipList"></a>\n\n### subnetv4.ipList ⇒ <code>[Array.&lt;IPv4&gt;](#IPv4)</code>\nReturn all IPv4 addresses within the subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+next"></a>\n\n### subnetv4.next ⇒ <code>[Subnetv4](#Subnetv4)</code>\nReturns the next adjacent subnet\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+prev"></a>\n\n### subnetv4.prev ⇒ <code>[Subnetv4](#Subnetv4)</code>\nReturns the previous adjacent subnet.\n\n**Kind**: instance property of <code>[Subnetv4](#Subnetv4)</code>  \n<a name="Subnetv4+subnets"></a>\n\n### subnetv4.subnets(bitmask, limit) ⇒ <code>[Array.&lt;Subnetv4&gt;](#Subnetv4)</code>\nReturns all subnets within the subnet, given the bitmask parameter. For example, if you have a subnet s for \'10.0.0.0/16\', calling s.subnets(\'/24\') will return all /24 subnets that are legal within 10.0.0.0/16. If you want to limit the number of subnets returned, add the second parameter: s.subnets(\'/24\', 4) will return 4 subnets.\n\n**Kind**: instance method of <code>[Subnetv4](#Subnetv4)</code>  \n\n| Param | Type |\n| --- | --- |\n| bitmask | <code>string</code> | \n| limit | <code>number</code> | \n\n<a name="Subnetv4+includes"></a>\n\n### subnetv4.includes(ip) ⇒ <code>boolean</code>\nTest to see if an IPv4 is within the subnet.\n\n**Kind**: instance method of <code>[Subnetv4](#Subnetv4)</code>  \n\n| Param | Type |\n| --- | --- |\n| ip | <code>[IPv4](#IPv4)</code> | \n\n\n* * * \n \n&copy; 2017 Armin Graf',
23 silly publish   readmeFilename: 'README.md',
23 silly publish   gitHead: '8d3d6bce62d208bddc30a7473cf2f1450365b3ef',
23 silly publish   _id: 'node-cidr@0.1.4',
23 silly publish   _shasum: '598599f330726296e2139194e4e23c6fc25657c3',
23 silly publish   _from: '.' }
24 info lifecycle node-cidr@0.1.4~prepublishOnly: node-cidr@0.1.4
25 silly lifecycle node-cidr@0.1.4~prepublishOnly: no script for prepublishOnly, continuing
26 verbose getPublishConfig undefined
27 silly mapToRegistry name node-cidr
28 silly mapToRegistry using default registry
29 silly mapToRegistry registry https://registry.npmjs.org/
30 silly mapToRegistry data Result {
30 silly mapToRegistry   raw: 'node-cidr',
30 silly mapToRegistry   scope: null,
30 silly mapToRegistry   escapedName: 'node-cidr',
30 silly mapToRegistry   name: 'node-cidr',
30 silly mapToRegistry   rawSpec: '',
30 silly mapToRegistry   spec: 'latest',
30 silly mapToRegistry   type: 'tag' }
31 silly mapToRegistry uri https://registry.npmjs.org/node-cidr
32 verbose publish registryBase https://registry.npmjs.org/
33 silly publish uploading /Users/arminhammer/.npm/node-cidr/0.1.4/package.tgz
34 verbose request uri https://registry.npmjs.org/node-cidr
35 verbose request sending authorization for write operation
36 info attempt registry request try #1 at 12:32:20 AM
37 verbose request using bearer token for auth
38 verbose request id ad36c1595b9365a7
39 http request PUT https://registry.npmjs.org/node-cidr
40 http 403 https://registry.npmjs.org/node-cidr
41 verbose headers { 'content-type': 'application/json',
41 verbose headers   'cache-control': 'max-age=300',
41 verbose headers   'content-length': '95',
41 verbose headers   'accept-ranges': 'bytes',
41 verbose headers   date: 'Thu, 09 Mar 2017 05:32:21 GMT',
41 verbose headers   via: '1.1 varnish',
41 verbose headers   connection: 'keep-alive',
41 verbose headers   'x-served-by': 'cache-jfk8126-JFK',
41 verbose headers   'x-cache': 'MISS',
41 verbose headers   'x-cache-hits': '0',
41 verbose headers   'x-timer': 'S1489037540.395924,VS0,VE681',
41 verbose headers   vary: 'Accept-Encoding' }
42 verbose request invalidating /Users/arminhammer/.npm/registry.npmjs.org/node-cidr on PUT
43 error publish Failed PUT 403
44 verbose stack Error: "You cannot publish over the previously published version 0.1.4." : node-cidr
44 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:304:12)
44 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:292:14)
44 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:212:14)
44 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:186:22)
44 verbose stack     at emitTwo (events.js:106:13)
44 verbose stack     at Request.emit (events.js:194:7)
44 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1081:10)
44 verbose stack     at emitOne (events.js:96:13)
44 verbose stack     at Request.emit (events.js:191:7)
44 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1001:12)
45 verbose statusCode 403
46 verbose pkgid node-cidr
47 verbose cwd /Users/arminhammer/projects/node-cidr
48 error Darwin 16.4.0
49 error argv "/usr/local/Cellar/node/7.7.1/bin/node" "/usr/local/bin/npm" "publish"
50 error node v7.7.1
51 error npm  v4.1.2
52 error code E403
53 error "You cannot publish over the previously published version 0.1.4." : node-cidr
54 error If you need help, you may report this error at:
54 error     <https://github.com/npm/npm/issues>
55 verbose exit [ 1, true ]

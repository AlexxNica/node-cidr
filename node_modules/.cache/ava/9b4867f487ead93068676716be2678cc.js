'use strict';

const ava = require('ava');

const IPv4 = require('../index').IPv4;
const Cidr = require('../index').Cidr;

ava('72.21.196.65', test => {
  let ip = new IPv4('72.21.196.65');
  test.is(ip.asString, '72.21.196.65');
  test.is(ip.asInt, 1209386049);
  test.is(ip.asCidr, '72.21.196.65/32');
});

ava('1209386049', test => {
  let ip = new IPv4(1209386049);
  test.is(ip.asString, '72.21.196.65');
  test.is(ip.asInt, 1209386049);
  test.is(ip.asCidr, '72.21.196.65/32');
});

ava('10.0.255.255', test => {
  let ip = new IPv4('10.0.255.255');
  test.is(ip.asString, '10.0.255.255');
  test.is(ip.asInt, 1209386049);
  test.is(ip.asCidr, '10.0.255.255/32');
});

let test2 = new IPv4('10.0.255.255');
console.log(test2.asString);
console.log(test2.asInt);

console.log('10.0.0.0/8');
let cidr0 = new Cidr('10.0.0.0/16');

//console.log('24:');
//console.log(cidr0.subnets('/24'));
//console.log('31:');
//console.log(cidr0.subnets('/31'));
//console.log('32:');
//console.log(cidr0.subnets('/32'));
console.log('16:');
console.log(cidr0.subnets('/16').length);
console.log('24:');
console.log(cidr0.subnets('/24').length);
console.log(cidr0.max);

console.log('10.0.0.0/17');
let cidr1 = new Cidr('10.0.0.0/17');
console.log('24:');
console.log(cidr1.subnets('/24').length);
console.log(cidr1.max.asString);
console.log(cidr1.range);
//# sourceMappingURL=../node_modules/.cache/ava/9b4867f487ead93068676716be2678cc.js.map